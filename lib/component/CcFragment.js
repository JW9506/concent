"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var helper = _interopRequireWildcard(require("../core/helper"));

var _react = _interopRequireWildcard(require("react"));

var _constant = require("../support/constant");

var _ccContext = _interopRequireDefault(require("../cc-context"));

var _util = _interopRequireDefault(require("../support/util"));

var _getFeatureStrAndStpmapping = _interopRequireDefault(require("../core//helper/get-feature-str-and-stpmapping"));

var ev = _interopRequireWildcard(require("../core/helper/event"));

var _extractStateByCcsync2 = _interopRequireDefault(require("../core/helper/extract-state-by-ccsync"));

var ccClassKey_ccClassContext_ = _ccContext["default"].ccClassKey_ccClassContext_,
    fragmentFeature_classKey_ = _ccContext["default"].fragmentFeature_classKey_,
    computed = _ccContext["default"].computed;
/**
 * 根据connect参数动态的把CcFragment划为某个ccClassKey的实例，同时计算出stateToPropMapping值
 * @param connectSpec 形如: {foo:'*', bar:['b1', 'b2']}
 */

function getFragmentClassKeyAndStpMapping(connectSpec) {
  if (!_util["default"].isObjectNotNull(connectSpec)) {
    //代表没有connect到store任何模块的CcFragment
    return {
      ccClassKey: _constant.CC_FRAGMENT_PREFIX + "_0",
      stateToPropMapping: null
    };
  }

  var _getFeatureStrAndStpM = (0, _getFeatureStrAndStpmapping["default"])(connectSpec),
      featureStr = _getFeatureStrAndStpM.featureStr,
      stateToPropMapping = _getFeatureStrAndStpM.stateToPropMapping;

  var ccClassKey = fragmentFeature_classKey_[featureStr];

  if (ccClassKey) {
    return {
      ccClassKey: ccClassKey,
      stateToPropMapping: stateToPropMapping
    };
  } else {
    var oldFragmentNameCount = _ccContext["default"].fragmentNameCount;
    var fragmentNameCount = oldFragmentNameCount + 1;
    _ccContext["default"].fragmentNameCount = fragmentNameCount;
    ccClassKey = _constant.CC_FRAGMENT_PREFIX + "_" + fragmentNameCount;
    fragmentFeature_classKey_[featureStr] = ccClassKey;
    return {
      ccClassKey: ccClassKey,
      stateToPropMapping: stateToPropMapping
    };
  }
}

var CcFragment =
/*#__PURE__*/
function (_Component) {
  (0, _inheritsLoose2["default"])(CcFragment, _Component);

  function CcFragment(props, context) {
    var _this;

    _this = _Component.call(this, props, context) || this;
    var ccKey = props.ccKey,
        _props$connect = props.connect,
        connectSpec = _props$connect === void 0 ? {} : _props$connect,
        _props$state = props.state,
        state = _props$state === void 0 ? {} : _props$state;

    var _getFragmentClassKeyA = getFragmentClassKeyAndStpMapping(connectSpec),
        ccClassKey = _getFragmentClassKeyA.ccClassKey,
        stateToPropMapping = _getFragmentClassKeyA.stateToPropMapping;

    var ccUniqueKey = '',
        isCcUniqueKeyAutoGenerated = false;

    if (ccKey) {
      // for CcFragment, if user supply ccKey to props, ccUniqueKey will equal ccKey
      ccUniqueKey = ccKey;
    } else {
      var _helper$computeCcUniq = helper.computeCcUniqueKey(false, ccClassKey, ccKey, true),
          ck = _helper$computeCcUniq.ccKey,
          cuk = _helper$computeCcUniq.ccUniqueKey,
          ag = _helper$computeCcUniq.isCcUniqueKeyAutoGenerated;

      ccUniqueKey = cuk;
      isCcUniqueKeyAutoGenerated = ag;
      ccKey = ck;
    }

    helper.buildCcClassContext(ccClassKey, _constant.MODULE_DEFAULT, [], [], [], [], stateToPropMapping, true);
    helper.setRef((0, _assertThisInitialized2["default"])(_this), false, ccClassKey, ccKey, ccUniqueKey, {}, true); // for CcFragment, just put ccClassKey to module's cc class keys

    var moduleName_ccClassKeys_ = _ccContext["default"].moduleName_ccClassKeys_;

    var ccClassKeys = _util["default"].safeGetArrayFromObject(moduleName_ccClassKeys_, _constant.MODULE_DEFAULT);

    if (!ccClassKeys.includes(ccClassKey)) ccClassKeys.push(ccClassKey);
    _this.$$connectedState = ccClassKey_ccClassContext_[ccClassKey].connectedState || {}; // only bind reactForceUpdateRef for CcFragment

    var reactForceUpdateRef = _this.forceUpdate.bind((0, _assertThisInitialized2["default"])(_this));

    var ccState = {
      module: _constant.MODULE_DEFAULT,
      ccClassKey: ccClassKey,
      ccKey: ccKey,
      ccUniqueKey: ccUniqueKey,
      isCcUniqueKeyAutoGenerated: isCcUniqueKeyAutoGenerated,
      stateToPropMapping: stateToPropMapping,
      renderCount: 0
    };
    _this.cc = {
      ccState: ccState,
      reactForceUpdate: function reactForceUpdate(state, cb) {
        ccState.renderCount += 1;
        reactForceUpdateRef(state, cb);
      }
    }; // hook implement fo CcFragment

    var __hookMeta = {
      isCcFragmentMounted: false,
      useStateCount: 0,
      useStateCursor: 0,
      stateArr: [],
      useEffectCount: 0,
      useEffectCursor: 0,
      effectCbArr: [],
      effectSeeAoa: [],
      // shouldEffectExecute array of array
      effectSeeResult: [],
      // collect every effect fn's shouldExecute result
      effectCbReturnArr: []
    };
    _this.__hookMeta = __hookMeta;
    var hook = {
      useState: function useState(initialState) {
        var cursor = __hookMeta.useStateCursor;
        var stateArr = __hookMeta.stateArr;
        __hookMeta.useStateCursor++;

        if (__hookMeta.isCcFragmentMounted === false) {
          //render CcFragment before componentDidMount
          __hookMeta.useStateCount++;
          stateArr[cursor] = initialState;
        } else {
          cursor = cursor % __hookMeta.useStateCount;
        }

        var setter = function setter(e) {
          if (e.currentTarget && e.type) {
            _this.__fragmentParams.sync(e, cursor);
          } else {
            stateArr[cursor] = e;

            _this.cc.reactForceUpdate();
          }
        };

        return [stateArr[cursor], setter];
      },
      useEffect: function useEffect(cb, shouldEffectExecute) {
        var cursor = __hookMeta.useEffectCursor;
        __hookMeta.useEffectCursor++;

        if (__hookMeta.isCcFragmentMounted === false) {
          __hookMeta.effectCbArr.push(cb);

          __hookMeta.effectSeeAoa.push(shouldEffectExecute);

          __hookMeta.useEffectCount++;
        } else {
          // if code running jump into this block, CcFragment already mounted, and now compute result for didUpdate
          cursor = cursor % __hookMeta.useEffectCount;

          if (Array.isArray(shouldEffectExecute)) {
            var len = shouldEffectExecute.length;

            if (len == 0) {
              __hookMeta.effectSeeResult[cursor] = false; // effect fn will been executed only in didMount
            } else {
              // compare prevSee and curSee
              var effectSeeResult = false;
              var prevSeeArr = __hookMeta.effectSeeAoa[cursor];

              if (!prevSeeArr) {
                effectSeeResult = true;
              } else {
                for (var i = 0; i < len; i++) {
                  if (shouldEffectExecute[i] !== prevSeeArr[i]) {
                    effectSeeResult = true;
                    break;
                  }
                }
              }

              __hookMeta.effectSeeAoa[cursor] = shouldEffectExecute;
              __hookMeta.effectSeeResult[cursor] = effectSeeResult;
              if (effectSeeResult) __hookMeta.effectCbArr[cursor] = cb;
            }
          } else {
            __hookMeta.effectSeeResult[cursor] = true; // effect fn will always been executed in didMount and didUpdate

            __hookMeta.effectSeeAoa[cursor] = shouldEffectExecute;
            __hookMeta.effectCbArr[cursor] = cb;
          }
        }
      }
    };
    var dispatcher = helper.getDispatcherRef();
    _this.state = state;
    var __fragmentParams = {
      connectedComputed: computed._computedValue,
      hook: hook,
      connectedState: _this.$$connectedState,
      emit: function emit(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        ev.findEventHandlersToPerform.apply(ev, [event, {
          identity: null
        }].concat(args));
      },
      emitIdentity: function emitIdentity(event, identity) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        ev.findEventHandlersToPerform.apply(ev, [event, {
          identity: identity
        }].concat(args));
      },
      on: function on(event, handler) {
        ev.bindEventHandlerToCcContext(_constant.MODULE_DEFAULT, ccClassKey, ccUniqueKey, event, null, handler);
      },
      onIdentity: function onIdentity(event, identity, handler) {
        ev.bindEventHandlerToCcContext(_constant.MODULE_DEFAULT, ccClassKey, ccUniqueKey, event, identity, handler);
      },
      dispatch: dispatcher.__$$getDispatchHandler(_constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE, _constant.MODULE_DEFAULT, null, null, null, -1, ccKey),
      effect: dispatcher.__$$getEffectHandler(ccKey),
      xeffect: dispatcher.__$$getXEffectHandler(ccKey),
      sync: function sync(e, cursor) {
        var currentTarget = e.currentTarget;
        var value = currentTarget.value,
            dataset = currentTarget.dataset;

        if (cursor != undefined) {
          // syncLocalHookState 同步本地的hook状态
          __hookMeta.stateArr[cursor] = value;

          _this.cc.reactForceUpdate();
        } else {
          var ccint = dataset.ccint,
              ccsync = dataset.ccsync;

          if (!ccsync) {
            return _util["default"].justWarning("data-ccsync attr no found, you must define it while using syncLocal");
          }

          if (ccsync.includes('/')) {
            // syncModuleState 同步模块的state状态
            dispatcher.$$sync(e, _constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE);
          } else {
            // syncLocalState 同步本地的state状态
            var _extractStateByCcsync = (0, _extractStateByCcsync2["default"])(ccsync, value, ccint, _this.state),
                _state = _extractStateByCcsync.state;

            __fragmentParams.setState(_state);
          }
        }
      },
      setModuleState: function setModuleState(module, state, lazyMs) {
        dispatcher.$$changeState(state, {
          ccKey: ccKey,
          module: module,
          stateFor: _constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE,
          broadcastTriggeredBy: null,
          lazyMs: lazyMs
        });
      },
      setGlobalState: function setGlobalState(state, lazyMs) {
        dispatcher.$$changeState(state, {
          ccKey: ccKey,
          MODULE_GLOBAL: _constant.MODULE_GLOBAL,
          stateFor: _constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE,
          broadcastTriggeredBy: null,
          lazyMs: lazyMs
        });
      },
      state: _this.state,
      setState: function setState(state) {
        _this.setState(state, function () {
          return _this.cc.reactForceUpdate();
        });
      }
    };
    _this.__fragmentParams = __fragmentParams;
    return _this;
  }

  var _proto = CcFragment.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$__hookMeta = this.__hookMeta,
        effectCbArr = _this$__hookMeta.effectCbArr,
        effectCbReturnArr = _this$__hookMeta.effectCbReturnArr;
    this.__hookMeta.isCcFragmentMounted = true;
    effectCbArr.forEach(function (cb) {
      var cbReturn = cb();

      if (typeof cbReturn === 'function') {
        effectCbReturnArr.push(cbReturn);
      } else {
        effectCbReturnArr.push(null);
      }
    });
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    var _this$__hookMeta2 = this.__hookMeta,
        effectCbArr = _this$__hookMeta2.effectCbArr,
        effectCbReturnArr = _this$__hookMeta2.effectCbReturnArr,
        effectSeeResult = _this$__hookMeta2.effectSeeResult;
    effectCbArr.forEach(function (cb, idx) {
      var shouldEffectExecute = effectSeeResult[idx];

      if (shouldEffectExecute) {
        var cbReturn = cb();

        if (typeof cbReturn === 'function') {
          effectCbReturnArr[idx] = cbReturn;
        }
      }
    });
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.__hookMeta.effectCbReturnArr.forEach(function (cb) {
      if (cb) cb();
    });

    var _this$cc$ccState = this.cc.ccState,
        ccUniqueKey = _this$cc$ccState.ccUniqueKey,
        ccClassKey = _this$cc$ccState.ccClassKey;
    ev.offEventHandlersByCcUniqueKey(ccUniqueKey);
    helper.unsetRef(ccClassKey, ccUniqueKey);
    if (_Component.prototype.componentWillUnmount) _Component.prototype.componentWillUnmount.call(this);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        render = _this$props.render;
    var view = render || children;

    if (typeof view === 'function') {
      this.__fragmentParams.state = this.state; //注意这里，一定要每次都取最新的

      return view(this.__fragmentParams) || _react["default"].createElement(_react.Fragment);
    } else {
      return view;
    }
  };

  return CcFragment;
}(_react.Component);

exports["default"] = CcFragment;